import os,sys,gc,warnings
import logging,math,re,heapq
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from IPython.display import display,HTML
from IPython.core.interactiveshell import InteractiveShell
from collections import Counter
from nltk.tokenize import word_tokenize

warnings.filterwarnings("ignore")
pd.set_option('display.max_rows',0)
pd.set_option('display.max_columns',0)
InteractiveShell.ast_node_interactivity="all"
display(HTML(data="""<style>div#notebook-container{width:95%;}</style>"""))

import nltk
nltk.download('stopwords')

word_list=[]
with open('t8.shakespeare.txt','r') as file:
  file_read=file.read()
  pre_process_file=re.findall(r"\w+",file_read)
  word_list=pre_process_file
  for word in word_list:
    if(word>='1' or word<='9'):
      continue
    word_list.append(word.lower())
vocab=set(word_list)

word_count_dict={}
word_count_dict=Counter(word_list)
print(f"There are {len(word_count_dict)} key value pairs")
print(f"The count for the word 'thee' is {word_count_dict.get('thee',0)}")

probs={}
total_words=sum(word_count_dict.values())
for word,word_count in word_count_dict.items():
  word_prob=word_count/total_words
  probs[word]=word_prob
print(f"Length of probs is {len(probs)}")

import spacy
nlp=spacy.load('en_core_web_sm')
doc=nlp("I live in New York and work as a data scientist.")
for word in doc.ents:
  print(word.text,word.label)
}

def delete_letter(word):
  delete_list=[]
  split_list=[]
  split_list=[(word[:i],word[i:]) for i in range (len(word))]
  delete_list=[L+R[1:] for L,R in split_list]
  return delete_list

def switch_letter(word):
  switch_list=[]
  split_list=[]
  split_list=[(word[:i],word[i:]) for i in range(len(word))]
  switch_list=[L+R[1]+R[0]+R[2:] for L,R in split_list if len(R)>=2]
  return switch_list

def replace_letter(word):
  letters='abcdefghijklmnopqrstuvwxyz'
  replace_list=[]
  split_list=[]
  split_list=[(word[0:i],word[i:]) for i in range(len(word))]
  replace_list=[L+letter+(R[1:] if len(R)>1 else '') for L,R in split_list if R for letter in letters]
  replace_set=set(replace_list)
  replace_list=sorted(list(replace_set))
  return replace_list

def insert_letter(word):
  letters='abcdefghijklmnopqrstuvwxyz'
  insert_list=[]
  split_list=[]
  split_list=[(word[0:i],word[i:]) for i in range(len(word)+1)]
  insert_list=[L+letter+R for L,R in split_list for letter in letters]
  return insert_list

def edit_one_letter(word,allow_switches=True):
  edit_one_set=set()
  edit_one_set.update(delete_letter(word))

  if allow_switches: edit_one_set.update(switch_letter(word))
  edit_one_set.update(replace_letter(word))
  edit_one_set.update(insert_letter(word))

  if word in edit_one_set:edit_one_set.remove(word)
  return edit_one_set

def edit_two_letter(word,allow_switches=True):
  edit_two_set=set()
  edit_one=edit_one_letter(word,allow_switches=allow_switches)

  for word in edit_one:
    if word:
      edit_two=edit_one_letter(word,allow_switches=allow_switches)
      edit_two_set.update(edit_two)
  return edit_two_set

def get_spelling_suggestions(word,probs,vocab,n=2):
  suggestions=[]
  top_n_suggestions=[]
  suggestions=list((word in vocab and word) or 
                   edit_one_letter(word).intersection(vocab) or
                   edit_two_letter(word).intersection(vocab))
  top_n_suggestions=[[s,probs[s]] for s in list(suggestions)]
  return top_n_suggestions

my_words=[]
input_word=input("Enter a word with incorrect spelling")
my_words.append(input_word)
tmp_corrections=[]
for word_c in my_words:
  tmp_corrections.append(get_spelling_suggestions(word_c,probs,vocab,3))
for i,word in enumerate(my_words):
  print('')
  print(f'Word-{my_words[i]}')
  for j,word_prob in enumerate(tmp_corrections[i]):
    print(f"Word-{j}:{word_prob[0]}, probability {word_prob[1]:.6f}")
